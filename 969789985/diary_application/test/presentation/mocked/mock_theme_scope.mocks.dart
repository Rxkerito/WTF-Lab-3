// Mocks generated by Mockito 5.3.2 from annotations
// in diary_application/test/presentation/mocked/mock_theme_scope.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:diary_application/src/core/data/repository/theme/theme_repository.dart'
    as _i3;
import 'package:diary_application/src/feature/cubit/theme/theme_cubit.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$ThemeStateCopyWith_0<$Res> extends _i1.SmartFake
    implements _i2.$ThemeStateCopyWith<$Res> {
  _Fake$ThemeStateCopyWith_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeState_1 extends _i1.SmartFake implements _i2.ThemeState {
  _FakeThemeState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ThemeState].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeState extends _i1.Mock implements _i2.ThemeState {
  MockThemeState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);
  @override
  double get messageFontSize => (super.noSuchMethod(
        Invocation.getter(#messageFontSize),
        returnValue: 0.0,
      ) as double);
  @override
  double get messageBorderRadius => (super.noSuchMethod(
        Invocation.getter(#messageBorderRadius),
        returnValue: 0.0,
      ) as double);
  @override
  int get primaryColor => (super.noSuchMethod(
        Invocation.getter(#primaryColor),
        returnValue: 0,
      ) as int);
  @override
  int get primaryItemColor => (super.noSuchMethod(
        Invocation.getter(#primaryItemColor),
        returnValue: 0,
      ) as int);
  @override
  String get messageAlignment => (super.noSuchMethod(
        Invocation.getter(#messageAlignment),
        returnValue: '',
      ) as String);
  @override
  bool get dateBubbleVisible => (super.noSuchMethod(
        Invocation.getter(#dateBubbleVisible),
        returnValue: false,
      ) as bool);
  @override
  int get chatBackgroundColor => (super.noSuchMethod(
        Invocation.getter(#chatBackgroundColor),
        returnValue: 0,
      ) as int);
  @override
  String get imagePath => (super.noSuchMethod(
        Invocation.getter(#imagePath),
        returnValue: '',
      ) as String);
  @override
  _i2.$ThemeStateCopyWith<_i2.ThemeState> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$ThemeStateCopyWith_0<_i2.ThemeState>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i2.$ThemeStateCopyWith<_i2.ThemeState>);
}

/// A class which mocks [ThemeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeCubit extends _i1.Mock implements _i2.ThemeCubit {
  MockThemeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set chatBackgroundColor(int? color) => super.noSuchMethod(
        Invocation.setter(
          #chatBackgroundColor,
          color,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set dateBubbleVisible(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #dateBubbleVisible,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set messageAlignment(_i3.BubbleAlignments? alignment) => super.noSuchMethod(
        Invocation.setter(
          #messageAlignment,
          alignment,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set isDarkMode(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isDarkMode,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set messageFontSize(double? value) => super.noSuchMethod(
        Invocation.setter(
          #messageFontSize,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set messageBorderRadius(double? value) => super.noSuchMethod(
        Invocation.setter(
          #messageBorderRadius,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ThemeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeThemeState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ThemeState);
  @override
  _i4.Stream<_i2.ThemeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.ThemeState>.empty(),
      ) as _i4.Stream<_i2.ThemeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void imagePath(String? path) => super.noSuchMethod(
        Invocation.method(
          #imagePath,
          [path],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setColors(
    int? primaryColor,
    int? primaryItemColor,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setColors,
          [
            primaryColor,
            primaryItemColor,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void changeTheme() => super.noSuchMethod(
        Invocation.method(
          #changeTheme,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetSettings() => super.noSuchMethod(
        Invocation.method(
          #resetSettings,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.ThemeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i5.Change<_i2.ThemeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
